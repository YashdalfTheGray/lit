#!/usr/bin/env python3

import sys
import getopt
import json
import shutil
import os

from zipfile import ZipFile, ZipInfo

from enum import Enum

help_message = """
copy-lib <mode> -f <location_of_adafruit_libraries> -l <json_list_of_libraries>

Options:
  - -s --stage\t\tcopy the desired libraries to the project folder
  - -d --deploy\t\tcopy the desired libraries to the CIRCUITPY volume
  - -a, --archive\tthe location of the downloaded Adafruit libraries bundle zip file
  - -t, --to-location\tthe location to copy to, current directory in stage mode, /Volumes/CIRCUITPY in deploy mode
  - -l, --library-list\ta JSON file containing a list of desired libraries

To copy into the `lib` directory of the current directory, use `--stage` or `-s`.
To copy into the `lib` directory of the CIRCUITPY volume, use `--deploy` or `-d`.

This script will (delete and re) create a folder called 'lib' at the destination.
The paths default to macOS mount points and linux paths but can be changed with
the --to-location flag.
"""


class Mode(Enum):
    STAGE = 1
    DEPLOY = 2


def load_json_list(path: str):
    with open(path) as json_file:
        return json.load(json_file)


def inner_library_path(path: str):
    return path.split('/', 1)[1]


def determine_to_location(mode: Mode, incoming_location: str) -> str:
    default_to_location_stage = "."
    default_to_location_deploy = "/Volumes/CIRCUITPY"

    if (len(incoming_location) > 0):
        return incoming_location
    elif (len(incoming_location) == 0 and mode == Mode.DEPLOY):
        return default_to_location_deploy
    else:
        return default_to_location_stage


def extract_relevant_zip_infos(libraries_list: list[str], archive_list: list[ZipInfo]) -> list[ZipInfo]:
    result: list[ZipInfo] = []

    for library in libraries_list:
        library_path = f"lib/{library}"

        matched_infos = list(filter(
            lambda zi: library_path in zi.filename, archive_list))

        for zi in matched_infos:
            zi.filename = inner_library_path(zi.filename)
            result.append(zi)

    return result


def main(argv):
    mode = Mode.STAGE

    archive_path = ""
    selected_libraries = ""
    to_location = ""

    try:
        opts, args = getopt.getopt(
            argv, "hsda:t:l:", [
                "help", "stage", "deploy", "archive=", "to-location=", "library-list="
            ]
        )
    except getopt.GetoptError:
        print("copy-lib -s -f <location_of_adafruit_bundle> -l <json_list_of_libraries>")
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(help_message)
            sys.exit()
        elif opt in ("-a", "--archive"):
            archive_path = arg
        elif opt in ("-l", "--library-list"):
            selected_libraries = arg
        elif opt in ("-t", "--to-location"):
            to_location = arg
        elif opt in ("-d", "--deploy"):
            mode = Mode.DEPLOY

    libraries_list = load_json_list(selected_libraries)
    destination_path_root = determine_to_location(mode, to_location)

    if mode == Mode.DEPLOY and not os.path.isdir(destination_path_root):
        sys.exit("The volume CIRCUITPY wasn't found, can't copy libraries to board.")

    shutil.rmtree(f"{destination_path_root}/lib", ignore_errors=True)
    os.mkdir(f"{destination_path_root}/lib")

    archive_file = ZipFile(archive_path)
    archive_info_list = archive_file.infolist()

    relevant_infos = extract_relevant_zip_infos(
        libraries_list, archive_info_list)

    for zi in relevant_infos:
        archive_file.extract(zi, destination_path_root)


if __name__ == "__main__":
    main(sys.argv[1:])
