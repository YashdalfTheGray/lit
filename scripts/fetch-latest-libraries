#!/usr/bin/env python3

import getopt
import os
import re
import requests
import sys

from typing import Callable, TypedDict


class AssetSpec(TypedDict):
    name: str
    url: str


help_message = """
fetch-latest-libraries -o <download_location> -t <github_api_token> -c <circuitpython_version>

Options:
  - -r --replace\t\t\twhether to replace the old archives, if they exist in the directory, false by default
  - -o --output-dir\t\t\tthe directory to download the libraries from
  - -t --github-token\t\t\tthe token to use to download the files
  - -c --circuitpython-verison\t\tthe version of the libraries to download, for example 7.x or 8.x
"""


def print_mini_help_and_exit():
    print(
        "fetch-latest-libraries -o <download_location> -t <github_api_token>"
    )
    sys.exit(2)


def is_version_valid(input_version: str) -> bool:
    return bool(re.match(r"^\d+\.x$", input_version))


def is_official_library(filename: str) -> bool:
    return filename.startswith("adafruit-circuitpython-bundle")


def is_community_library(filename: str) -> bool:
    return filename.startswith("circuitpython-community-bundle")


def matches_version(filename: str, version: str) -> bool:
    return version in filename


def find_and_cleanup_old_libraries(folder: str) -> list[str]:
    files_list = os.listdir(folder)
    filtered_list = [f"{folder}{os.sep}{f}" for f in files_list if (
        is_official_library(f) or is_community_library(f))]

    for f in filtered_list:
        os.remove(f)

    return filtered_list


def get_release_json(owner: str, repo: str, auth_token: str):
    response = requests.get(
        f"https://api.github.com/repos/{owner}/{repo}/releases/latest",
        {
            "Accept": "application/vnd.github+json",
            "X-GitHub-Api-Version": "2022-11-28",
            "Authorization": f"Bearer {auth_token}"
        }
    )

    return response.json()


def get_latest_release_asset(
    owner: str,
    repo: str,
    auth_token: str,
    circuitpython_version: str,
    matcher_func: Callable[[str], bool]
) -> AssetSpec:
    res_json = get_release_json(owner, repo, auth_token)
    res_assets = res_json["assets"]
    relevant_assets = [
        AssetSpec(name=a["name"], url=a["url"]) for a
        in res_assets
        if (
            matcher_func(a["name"]) and
            matches_version(a["name"], circuitpython_version)
        )
    ]

    if len(relevant_assets) > 1:
        print(
            f"WARN: more than one asset found for CircuitPython version {circuitpython_version} in the latest release in {owner}/{repo}. Selecting the first one.")

    return relevant_assets[0]


def get_latest_official_library_url(
    auth_token: str, circuitpython_version: str
) -> AssetSpec:
    return get_latest_release_asset(
        "adafruit",
        "Adafruit_CircuitPython_Bundle",
        auth_token,
        circuitpython_version,
        is_official_library
    )


def get_latest_community_library_url(
    auth_token: str, circuitpython_version: str
) -> AssetSpec:
    return get_latest_release_asset(
        "adafruit",
        "CircuitPython_Community_Bundle",
        auth_token,
        circuitpython_version,
        is_community_library
    )


def main(argv):
    output_dir = ""
    github_token = ""
    circuitpython_version = ""
    replace = False

    try:
        opts, args = getopt.getopt(
            argv, "hro:t:c:", [
                "help",
                "replace",
                "output-dir=",
                "github-token=",
                "circuitpython-version="
            ]
        )
    except getopt.GetoptError:
        print_mini_help_and_exit()

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(help_message)
            sys.exit()
        elif opt in ("-r", "--replace"):
            replace = True
        elif opt in ("-o", "--output-dir"):
            output_dir = arg
        elif opt in ("-t", "--github-token"):
            github_token = arg
        elif opt in ("-c", "--circuitpython-version"):
            if is_version_valid(arg):
                circuitpython_version = arg
            else:
                raise TypeError(
                    f"Version string {arg} does not match valid release string spec. Please visit https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases to see version strings")

    if (
        len(output_dir) == 0 or
        len(github_token) == 0 or
        len(circuitpython_version) == 0
    ):
        print_mini_help_and_exit()

    abs_output_dir = os.path.abspath(output_dir)

    official_library_asset = get_latest_official_library_url(
        github_token, circuitpython_version
    )
    community_library_asset = get_latest_community_library_url(
        github_token, circuitpython_version
    )

    print(official_library_asset)
    print(community_library_asset)

    if replace:
        removed_files = find_and_cleanup_old_libraries(abs_output_dir)

        print("cleaned up the following files:")
        for f in removed_files:
            print(f" - {f}")

        print("\n")


if __name__ == "__main__":
    main(sys.argv[1:])
